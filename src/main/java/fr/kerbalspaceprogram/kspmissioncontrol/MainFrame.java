/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.kerbalspaceprogram.kspmissioncontrol;

import java.awt.Frame;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import fr.kerbalspaceprogram.kspmissioncontrol.Telemetry.DataTelemetry;

/**
 *
 * @author Bruno
 */
public class MainFrame extends javax.swing.JFrame {
    
    private class TelemetryListener implements Runnable {
        
        private final static int BUFFER_SIZE = 1024;
        private final static int PORT = 8000;
        
        @Override
        public void run() {
            try {
                DatagramSocket datagramSocket = new DatagramSocket(PORT);
              
                     byte[] buffer = new byte[BUFFER_SIZE];
                     
                     while (true) {
                         DatagramPacket datagramPacket = new DatagramPacket(buffer, buffer.length);
                         datagramSocket.receive(datagramPacket);   
                         
                         Telemetry t = new Telemetry(datagramPacket);
                         data.add(t);
                         
                         if (!probeNames.containsKey(t.getData(DataTelemetry.uid))) addProbe(t.getData(DataTelemetry.uid), t.getData(DataTelemetry.name));
                         
                         updateTelemetryPanel(t);
                         updateChart(t);
                     }
            } catch (SocketException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
    }
    
    private Thread telemetryListener = null;
    private ArrayList<Telemetry> data = null;
    private HashMap<String, ArrayList<KspChart>> kspCharts = null;
    private HashMap<String, JPanel> probePanels = null;
    private HashMap<String, String> probeNames = null;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setTitle("Kerbal Space Center - Mission Control");
        this.telemetryListener = new Thread(new TelemetryListener());
        this.telemetryListener.start();
        this.kspCharts = new HashMap<String, ArrayList<KspChart>>();
        this.data = new ArrayList<Telemetry>();
        this.probePanels = new HashMap<String, JPanel>();
        this.probeNames = new HashMap<String, String>();
        
        //this.addProbe("uid", "Z-MAP Satellite");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        probesPanel = new javax.swing.JPanel();
        jLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exportAllMenuItem = new javax.swing.JMenuItem();
        exportProbeMenu = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();
        addChartMenu = new javax.swing.JMenu();
        removeChartMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(640, 480));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        probesPanel.setBackground(new java.awt.Color(0, 0, 0));
        probesPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        probesPanel.setForeground(new java.awt.Color(204, 204, 204));
        probesPanel.setLayout(new javax.swing.BoxLayout(probesPanel, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel.setForeground(new java.awt.Color(204, 204, 204));
        jLabel.setText("Wating for probes data reception...");
        probesPanel.add(jLabel);

        tabbedPane.addTab("Probes", probesPanel);

        getContentPane().add(tabbedPane);

        fileMenu.setText("File");

        exportAllMenuItem.setText("Export all to csv");
        exportAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAllMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportAllMenuItem);

        exportProbeMenu.setText("Export probe to csv");
        fileMenu.add(exportProbeMenu);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        addChartMenu.setText("Add chart");
        editMenu.add(addChartMenu);

        removeChartMenu.setText("Remove chart");
        editMenu.add(removeChartMenu);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAllMenuItemActionPerformed
        this.exportCsv();
    }//GEN-LAST:event_exportAllMenuItemActionPerformed

    protected void addChart(final String uid, final KspChart kspChart) {
        this.kspCharts.get(uid).add(kspChart);
        this.tabbedPane.add(kspChart.getTitle(), kspChart.getChartPanel());
        
        final JMenuItem menuItem = new JMenuItem(kspChart.getTitle());
        menuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeChartMenu.remove(menuItem);
                tabbedPane.remove(kspChart.getChartPanel());
                kspCharts.get(uid).remove(kspChart);
            }
        });
        
        this.removeChartMenu.add(menuItem);
    }
    
    private void addProbe(final String uid, final String probeName) {        
        // Menu item pour créer des charts
        final Frame parent = this;
        JMenuItem mi = new JMenuItem();
        mi.setText(probeName);
        mi.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewChartDialog n = new NewChartDialog(parent, false, uid, probeName);
                n.setVisible(true);
            }
        });
        this.addChartMenu.add(mi);
        
        // Menu item pour exporter les data
        mi = new JMenuItem();
        mi.setText(probeName);
        mi.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCsv(uid);
            }
        });
        this.exportProbeMenu.add(mi);
        
        // Panel de télémétrie
        JPanel p = new JPanel();
        p.setBackground(this.probesPanel.getBackground());
        p.setForeground(this.probesPanel.getForeground());
        p.setLayout(new BoxLayout(p, BoxLayout.PAGE_AXIS));
        p.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        this.tabbedPane.add(probeName + " - Telemetry", p);
        
        this.probePanels.put(uid, p);
        this.probeNames.put(uid, probeName);
        this.kspCharts.put(uid, new ArrayList<KspChart>());
        
        this.updateProbesPanel();
    }
    
    private void updateProbesPanel() {
        this.probesPanel.removeAll();
        for (String s : this.probeNames.values()) {
            JLabel l = new JLabel();
            l.setText(s);// + " : online");
            l.setBackground(this.probesPanel.getBackground());
            l.setForeground(this.probesPanel.getForeground());
            this.probesPanel.add(l);
        }
        //JLabel l = new JLabel();
        //l.setText("Waiting for probes data reception...");
        //l.setBackground(this.probesPanel.getBackground());
        //l.setForeground(this.probesPanel.getForeground());
        //this.probesPanel.add(l);
        this.probesPanel.revalidate();
    }
    
    private void updateTelemetryPanel(Telemetry t) {
        JPanel p = this.probePanels.get(t.getData(DataTelemetry.uid));
        p.removeAll();            
        for (DataTelemetry dt : DataTelemetry.values()) {
            JLabel label = new JLabel();
            label.setText(String.format("%s : %s", Telemetry.getDataLabel(dt), t.getData(dt)));
            label.setForeground(p.getForeground());
            p.add(label);
        }               
        if (p == this.tabbedPane.getSelectedComponent()) p.revalidate();
    }
    
    private void updateChart(Telemetry t) {
        for(KspChart kspc : kspCharts.get(t.getData(DataTelemetry.uid)))
            kspc.addData(t);
    }
    
    private void exportCsv() {
        exportCsv(null);
    }
    
    private void exportCsv(String uid) {
        String name = (uid != null)?this.probeNames.get(uid):null;
        
        JFileChooser exportFile =new JFileChooser();
        exportFile.setSelectedFile(new File("export" + (name==null?"":" "+name) + ".csv"));
        if (exportFile.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            BufferedWriter bw = null;
            try {
                bw = new BufferedWriter(new FileWriter(exportFile.getSelectedFile()));
                
                for (int i=0; i < DataTelemetry.values().length; i++) {
                    bw.write(Telemetry.getDataLabel(DataTelemetry.values()[i]));
                    if (i < DataTelemetry.values().length - 1) bw.write(',');
                }
                
                for (Telemetry t : data) {
                    if (uid != null && !t.getData(DataTelemetry.uid).equals(uid)) continue;
                    bw.newLine();
                    bw.write(t.toString());
                }
         
                bw.flush();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (bw != null) bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu addChartMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exportAllMenuItem;
    private javax.swing.JMenu exportProbeMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel probesPanel;
    private javax.swing.JMenu removeChartMenu;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
